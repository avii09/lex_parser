Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMA
    EQUALS
    FOR
    OPERATOR
    RETURN
    STRING
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> statement program
Rule 3     statement -> function_def
Rule 4     statement -> if_statement
Rule 5     statement -> expression_statement
Rule 6     function_def -> DEF IDENTIFIER LPAREN IDENTIFIER RPAREN COLON statement
Rule 7     if_statement -> IF expression COLON statement ELSE COLON statement
Rule 8     expression_statement -> expression NEWLINE
Rule 9     expression -> expression PLUS expression
Rule 10    expression -> expression MINUS expression
Rule 11    expression -> expression TIMES expression
Rule 12    expression -> expression DIVIDE expression
Rule 13    expression -> NUMBER
Rule 14    expression -> IDENTIFIER

Terminals, with rules where they appear

COLON                : 6 7 7
COMMA                : 
DEF                  : 6
DIVIDE               : 12
ELSE                 : 7
EQUALS               : 
FOR                  : 
IDENTIFIER           : 6 6 14
IF                   : 7
LPAREN               : 6
MINUS                : 10
NEWLINE              : 8
NUMBER               : 13
OPERATOR             : 
PLUS                 : 9
RETURN               : 
RPAREN               : 6
STRING               : 
TIMES                : 11
WHILE                : 
error                : 

Nonterminals, with rules where they appear

expression           : 7 8 9 9 10 10 11 11 12 12
expression_statement : 5
function_def         : 3
if_statement         : 4
program              : 2 0
statement            : 1 2 6 7 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . statement program
    (3) statement -> . function_def
    (4) statement -> . if_statement
    (5) statement -> . expression_statement
    (6) function_def -> . DEF IDENTIFIER LPAREN IDENTIFIER RPAREN COLON statement
    (7) if_statement -> . IF expression COLON statement ELSE COLON statement
    (8) expression_statement -> . expression NEWLINE
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER

    DEF             shift and go to state 6
    IF              shift and go to state 8
    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 7

    program                        shift and go to state 1
    statement                      shift and go to state 2
    function_def                   shift and go to state 3
    if_statement                   shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 9

state 1

    (0) S' -> program .



state 2

    (1) program -> statement .
    (2) program -> statement . program
    (1) program -> . statement
    (2) program -> . statement program
    (3) statement -> . function_def
    (4) statement -> . if_statement
    (5) statement -> . expression_statement
    (6) function_def -> . DEF IDENTIFIER LPAREN IDENTIFIER RPAREN COLON statement
    (7) if_statement -> . IF expression COLON statement ELSE COLON statement
    (8) expression_statement -> . expression NEWLINE
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER

    $end            reduce using rule 1 (program -> statement .)
    DEF             shift and go to state 6
    IF              shift and go to state 8
    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 7

    statement                      shift and go to state 2
    program                        shift and go to state 11
    function_def                   shift and go to state 3
    if_statement                   shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 9

state 3

    (3) statement -> function_def .

    DEF             reduce using rule 3 (statement -> function_def .)
    IF              reduce using rule 3 (statement -> function_def .)
    NUMBER          reduce using rule 3 (statement -> function_def .)
    IDENTIFIER      reduce using rule 3 (statement -> function_def .)
    $end            reduce using rule 3 (statement -> function_def .)
    ELSE            reduce using rule 3 (statement -> function_def .)


state 4

    (4) statement -> if_statement .

    DEF             reduce using rule 4 (statement -> if_statement .)
    IF              reduce using rule 4 (statement -> if_statement .)
    NUMBER          reduce using rule 4 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 4 (statement -> if_statement .)
    $end            reduce using rule 4 (statement -> if_statement .)
    ELSE            reduce using rule 4 (statement -> if_statement .)


state 5

    (5) statement -> expression_statement .

    DEF             reduce using rule 5 (statement -> expression_statement .)
    IF              reduce using rule 5 (statement -> expression_statement .)
    NUMBER          reduce using rule 5 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 5 (statement -> expression_statement .)
    $end            reduce using rule 5 (statement -> expression_statement .)
    ELSE            reduce using rule 5 (statement -> expression_statement .)


state 6

    (6) function_def -> DEF . IDENTIFIER LPAREN IDENTIFIER RPAREN COLON statement

    IDENTIFIER      shift and go to state 12


state 7

    (14) expression -> IDENTIFIER .

    NEWLINE         reduce using rule 14 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 14 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 14 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 14 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 14 (expression -> IDENTIFIER .)
    COLON           reduce using rule 14 (expression -> IDENTIFIER .)


state 8

    (7) if_statement -> IF . expression COLON statement ELSE COLON statement
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 7

    expression                     shift and go to state 13

state 9

    (8) expression_statement -> expression . NEWLINE
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression

    NEWLINE         shift and go to state 14
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18


state 10

    (13) expression -> NUMBER .

    NEWLINE         reduce using rule 13 (expression -> NUMBER .)
    PLUS            reduce using rule 13 (expression -> NUMBER .)
    MINUS           reduce using rule 13 (expression -> NUMBER .)
    TIMES           reduce using rule 13 (expression -> NUMBER .)
    DIVIDE          reduce using rule 13 (expression -> NUMBER .)
    COLON           reduce using rule 13 (expression -> NUMBER .)


state 11

    (2) program -> statement program .

    $end            reduce using rule 2 (program -> statement program .)


state 12

    (6) function_def -> DEF IDENTIFIER . LPAREN IDENTIFIER RPAREN COLON statement

    LPAREN          shift and go to state 19


state 13

    (7) if_statement -> IF expression . COLON statement ELSE COLON statement
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression

    COLON           shift and go to state 20
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18


state 14

    (8) expression_statement -> expression NEWLINE .

    DEF             reduce using rule 8 (expression_statement -> expression NEWLINE .)
    IF              reduce using rule 8 (expression_statement -> expression NEWLINE .)
    NUMBER          reduce using rule 8 (expression_statement -> expression NEWLINE .)
    IDENTIFIER      reduce using rule 8 (expression_statement -> expression NEWLINE .)
    $end            reduce using rule 8 (expression_statement -> expression NEWLINE .)
    ELSE            reduce using rule 8 (expression_statement -> expression NEWLINE .)


state 15

    (9) expression -> expression PLUS . expression
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 7

    expression                     shift and go to state 21

state 16

    (10) expression -> expression MINUS . expression
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 7

    expression                     shift and go to state 22

state 17

    (11) expression -> expression TIMES . expression
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 7

    expression                     shift and go to state 23

state 18

    (12) expression -> expression DIVIDE . expression
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 7

    expression                     shift and go to state 24

state 19

    (6) function_def -> DEF IDENTIFIER LPAREN . IDENTIFIER RPAREN COLON statement

    IDENTIFIER      shift and go to state 25


state 20

    (7) if_statement -> IF expression COLON . statement ELSE COLON statement
    (3) statement -> . function_def
    (4) statement -> . if_statement
    (5) statement -> . expression_statement
    (6) function_def -> . DEF IDENTIFIER LPAREN IDENTIFIER RPAREN COLON statement
    (7) if_statement -> . IF expression COLON statement ELSE COLON statement
    (8) expression_statement -> . expression NEWLINE
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER

    DEF             shift and go to state 6
    IF              shift and go to state 8
    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 7

    expression                     shift and go to state 9
    statement                      shift and go to state 26
    function_def                   shift and go to state 3
    if_statement                   shift and go to state 4
    expression_statement           shift and go to state 5

state 21

    (9) expression -> expression PLUS expression .
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression

    NEWLINE         reduce using rule 9 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 9 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 9 (expression -> expression PLUS expression .)
    COLON           reduce using rule 9 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18

  ! TIMES           [ reduce using rule 9 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 9 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]


state 22

    (10) expression -> expression MINUS expression .
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression

    NEWLINE         reduce using rule 10 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 10 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 10 (expression -> expression MINUS expression .)
    COLON           reduce using rule 10 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18

  ! TIMES           [ reduce using rule 10 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 10 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]


state 23

    (11) expression -> expression TIMES expression .
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression

    NEWLINE         reduce using rule 11 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 11 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 11 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 11 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 11 (expression -> expression TIMES expression .)
    COLON           reduce using rule 11 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]
  ! TIMES           [ shift and go to state 17 ]
  ! DIVIDE          [ shift and go to state 18 ]


state 24

    (12) expression -> expression DIVIDE expression .
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression

    NEWLINE         reduce using rule 12 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 12 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 12 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 12 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 12 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 12 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]
  ! TIMES           [ shift and go to state 17 ]
  ! DIVIDE          [ shift and go to state 18 ]


state 25

    (6) function_def -> DEF IDENTIFIER LPAREN IDENTIFIER . RPAREN COLON statement

    RPAREN          shift and go to state 27


state 26

    (7) if_statement -> IF expression COLON statement . ELSE COLON statement

    ELSE            shift and go to state 28


state 27

    (6) function_def -> DEF IDENTIFIER LPAREN IDENTIFIER RPAREN . COLON statement

    COLON           shift and go to state 29


state 28

    (7) if_statement -> IF expression COLON statement ELSE . COLON statement

    COLON           shift and go to state 30


state 29

    (6) function_def -> DEF IDENTIFIER LPAREN IDENTIFIER RPAREN COLON . statement
    (3) statement -> . function_def
    (4) statement -> . if_statement
    (5) statement -> . expression_statement
    (6) function_def -> . DEF IDENTIFIER LPAREN IDENTIFIER RPAREN COLON statement
    (7) if_statement -> . IF expression COLON statement ELSE COLON statement
    (8) expression_statement -> . expression NEWLINE
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER

    DEF             shift and go to state 6
    IF              shift and go to state 8
    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 7

    statement                      shift and go to state 31
    function_def                   shift and go to state 3
    if_statement                   shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 9

state 30

    (7) if_statement -> IF expression COLON statement ELSE COLON . statement
    (3) statement -> . function_def
    (4) statement -> . if_statement
    (5) statement -> . expression_statement
    (6) function_def -> . DEF IDENTIFIER LPAREN IDENTIFIER RPAREN COLON statement
    (7) if_statement -> . IF expression COLON statement ELSE COLON statement
    (8) expression_statement -> . expression NEWLINE
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER

    DEF             shift and go to state 6
    IF              shift and go to state 8
    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 7

    expression                     shift and go to state 9
    statement                      shift and go to state 32
    function_def                   shift and go to state 3
    if_statement                   shift and go to state 4
    expression_statement           shift and go to state 5

state 31

    (6) function_def -> DEF IDENTIFIER LPAREN IDENTIFIER RPAREN COLON statement .

    DEF             reduce using rule 6 (function_def -> DEF IDENTIFIER LPAREN IDENTIFIER RPAREN COLON statement .)
    IF              reduce using rule 6 (function_def -> DEF IDENTIFIER LPAREN IDENTIFIER RPAREN COLON statement .)
    NUMBER          reduce using rule 6 (function_def -> DEF IDENTIFIER LPAREN IDENTIFIER RPAREN COLON statement .)
    IDENTIFIER      reduce using rule 6 (function_def -> DEF IDENTIFIER LPAREN IDENTIFIER RPAREN COLON statement .)
    $end            reduce using rule 6 (function_def -> DEF IDENTIFIER LPAREN IDENTIFIER RPAREN COLON statement .)
    ELSE            reduce using rule 6 (function_def -> DEF IDENTIFIER LPAREN IDENTIFIER RPAREN COLON statement .)


state 32

    (7) if_statement -> IF expression COLON statement ELSE COLON statement .

    DEF             reduce using rule 7 (if_statement -> IF expression COLON statement ELSE COLON statement .)
    IF              reduce using rule 7 (if_statement -> IF expression COLON statement ELSE COLON statement .)
    NUMBER          reduce using rule 7 (if_statement -> IF expression COLON statement ELSE COLON statement .)
    IDENTIFIER      reduce using rule 7 (if_statement -> IF expression COLON statement ELSE COLON statement .)
    $end            reduce using rule 7 (if_statement -> IF expression COLON statement ELSE COLON statement .)
    ELSE            reduce using rule 7 (if_statement -> IF expression COLON statement ELSE COLON statement .)

