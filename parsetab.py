
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDECOLON COMMA DEF DIVIDE ELSE EQUALS FOR IDENTIFIER IF LPAREN MINUS NEWLINE NUMBER OPERATOR PLUS RETURN RPAREN STRING TIMES WHILEprogram : statement\n               | statement programstatement : function_def\n                 | if_statement\n                 | expression_statementfunction_def : DEF IDENTIFIER LPAREN IDENTIFIER RPAREN COLON statementif_statement : IF expression COLON statement ELSE COLON statementexpression_statement : expression NEWLINEexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | NUMBER\n                  | IDENTIFIER'
    
_lr_action_items = {'DEF':([0,2,3,4,5,14,20,29,30,31,32,],[6,6,-3,-4,-5,-8,6,6,6,-6,-7,]),'IF':([0,2,3,4,5,14,20,29,30,31,32,],[8,8,-3,-4,-5,-8,8,8,8,-6,-7,]),'NUMBER':([0,2,3,4,5,8,14,15,16,17,18,20,29,30,31,32,],[10,10,-3,-4,-5,10,-8,10,10,10,10,10,10,10,-6,-7,]),'IDENTIFIER':([0,2,3,4,5,6,8,14,15,16,17,18,19,20,29,30,31,32,],[7,7,-3,-4,-5,12,7,-8,7,7,7,7,25,7,7,7,-6,-7,]),'$end':([1,2,3,4,5,11,14,31,32,],[0,-1,-3,-4,-5,-2,-8,-6,-7,]),'ELSE':([3,4,5,14,26,31,32,],[-3,-4,-5,-8,28,-6,-7,]),'NEWLINE':([7,9,10,21,22,23,24,],[-14,14,-13,-9,-10,-11,-12,]),'PLUS':([7,9,10,13,21,22,23,24,],[-14,15,-13,15,-9,-10,-11,-12,]),'MINUS':([7,9,10,13,21,22,23,24,],[-14,16,-13,16,-9,-10,-11,-12,]),'TIMES':([7,9,10,13,21,22,23,24,],[-14,17,-13,17,17,17,-11,-12,]),'DIVIDE':([7,9,10,13,21,22,23,24,],[-14,18,-13,18,18,18,-11,-12,]),'COLON':([7,10,13,21,22,23,24,27,28,],[-14,-13,20,-9,-10,-11,-12,29,30,]),'LPAREN':([12,],[19,]),'RPAREN':([25,],[27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,11,]),'statement':([0,2,20,29,30,],[2,2,26,31,32,]),'function_def':([0,2,20,29,30,],[3,3,3,3,3,]),'if_statement':([0,2,20,29,30,],[4,4,4,4,4,]),'expression_statement':([0,2,20,29,30,],[5,5,5,5,5,]),'expression':([0,2,8,15,16,17,18,20,29,30,],[9,9,13,21,22,23,24,9,9,9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','function.py',93),
  ('program -> statement program','program',2,'p_program','function.py',94),
  ('statement -> function_def','statement',1,'p_statement','function.py',98),
  ('statement -> if_statement','statement',1,'p_statement','function.py',99),
  ('statement -> expression_statement','statement',1,'p_statement','function.py',100),
  ('function_def -> DEF IDENTIFIER LPAREN IDENTIFIER RPAREN COLON statement','function_def',7,'p_function_def','function.py',104),
  ('if_statement -> IF expression COLON statement ELSE COLON statement','if_statement',7,'p_if_statement','function.py',108),
  ('expression_statement -> expression NEWLINE','expression_statement',2,'p_expression_statement','function.py',112),
  ('expression -> expression PLUS expression','expression',3,'p_expression','function.py',116),
  ('expression -> expression MINUS expression','expression',3,'p_expression','function.py',117),
  ('expression -> expression TIMES expression','expression',3,'p_expression','function.py',118),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','function.py',119),
  ('expression -> NUMBER','expression',1,'p_expression','function.py',120),
  ('expression -> IDENTIFIER','expression',1,'p_expression','function.py',121),
]
